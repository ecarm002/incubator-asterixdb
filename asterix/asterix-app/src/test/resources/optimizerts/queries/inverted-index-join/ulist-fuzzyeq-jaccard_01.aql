drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type AddressType as closed {
  number: int32, 
  street: string,
  city: string
}

create type CustomerType as closed {
  cid: int32, 
  name: string,
  age: int32?,
  address: AddressType?,
  interests: {{string}},
  children: [ { name: string, age: int32? } ]
}

create nodegroup group1 if not exists on nc1, nc2;

create dataset Customers(CustomerType) 
  partitioned by key cid on group1;
  
create dataset Customers2(CustomerType) 
  partitioned by key cid on group1;

load dataset Customers 
using "edu.uci.ics.asterix.external.dataset.adapter.NCFileSystemAdapter"
(("path"="nc1://data/semistructured/co1k/customer.adm"),("format"="adm"));

load dataset Customers2
using "edu.uci.ics.asterix.external.dataset.adapter.NCFileSystemAdapter"
(("path"="nc1://data/semistructured/co1k/customer.adm"),("format"="adm"));

create index interests_index on Customers(interests) type keyword;

write output to nc1:"rttest/inverted-index-join_ulist-fuzzyeq-jaccard_01.adm";

set simfunction 'jaccard';
set simthreshold '0.7f';

for $a in dataset('Customers')
for $b in dataset('Customers2')
where $a.interests ~= $b.interests
return {"arec": $a, "brec": $b }

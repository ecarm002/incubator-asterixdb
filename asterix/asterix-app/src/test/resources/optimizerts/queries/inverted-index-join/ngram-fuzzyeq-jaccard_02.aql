drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type DBLPType as closed {
  id: int32, 
  dblpid: string,
  title: string,
  authors: string,
  misc: string
}

create type CSXType as closed {
  id: int32, 
  csxid: string,
  title: string,
  authors: string,
  misc: string
}

create nodegroup group1 if not exists on nc1, nc2;

create dataset DBLP(DBLPType) 
  partitioned by key id on group1;

create dataset CSX(CSXType) 
  partitioned by key id on group1;

load dataset DBLP 
using "edu.uci.ics.asterix.external.dataset.adapter.NCFileSystemAdapter"
(("path"="nc1://data/dblp-small/dblp-small-id.txt"),("format"="delimited-text"),("delimiter"=":")) pre-sorted;

load dataset CSX
using "edu.uci.ics.asterix.external.dataset.adapter.NCFileSystemAdapter"
(("path"="nc1://data/pub-small/csx-small-id.txt"),("format"="delimited-text"),("delimiter"=":"));

create index ngram_index on CSX(title) type ngram(3);

write output to nc1:"rttest/inverted-index-join_ngram-fuzzyeq-jaccard_02.adm";

set simfunction 'jaccard';
set simthreshold '0.5f';

for $a in dataset('DBLP')
for $b in dataset('CSX')
where gram-tokens($a.title, 3, false) ~= gram-tokens($b.title, 3, false)
return {"arec": $a, "brec": $b }
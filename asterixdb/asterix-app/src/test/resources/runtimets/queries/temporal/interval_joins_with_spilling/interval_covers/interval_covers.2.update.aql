/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Description      :   Check temporal join functionality when spilling for interval
 * Expected Result  :   Success
 * Date             :   11th Jul, 2017
 */

/*
 * The number of active tuples must exceed join memory.
 *
 * 4096 time points * 2 arrival rate = 8192 records
 * 8192 records / 4 nodes = 2048 tuples per node
 *
 * 32000 byte frame size / ~1000 byte record = 32 records per frame
 * 160000 byte join size / ~1000 byte record = 160 records join memory
 *
 * Dataset R 256 duration * 2 arrival rate = 512 active records
 * Dataset S 64 duration * 2 arrival rate = 128 active records
 * Covers 256 - 64 = 192 joined records for each tuple in R with S
 * 192 records > 80 records join memory = spilling
 */


use dataverse CostModel;

insert into dataset R
let $filler := repeat("i", 971)
let $start := 1
let $end := 4096
let $lambda := 2
let $d := 256
for $s in range($start, $end)
  for $l in range(1, $lambda)
  return {
    "id": create-uuid(),
    "data": interval(datetime-from-unix-time-in-ms($s), datetime-from-unix-time-in-ms($s + $d)),
    "filler": $filler
  };


insert into dataset S
let $filler := repeat("i", 971)
let $start := 1
let $end := 4096
let $lambda := 2
let $d := 64
for $s in range($start, $end)
  for $l in range(1, $lambda)
  return {
    "id": create-uuid(),
    "data": interval(datetime-from-unix-time-in-ms($s), datetime-from-unix-time-in-ms($s + $d)),
    "filler": $filler
  };

drop dataverse q13_customer_distribution if exists;

create dataverse q13_customer_distribution;
  

use dataverse q13_customer_distribution;

create type OrderType as closed {
  o_orderkey: int32, 
  o_custkey: int32, 
  o_orderstatus: string, 
  o_totalprice: double, 
  o_orderdate: string, 
  o_orderpriority: string,
  o_clerk: string, 
  o_shippriority: int32, 
  o_comment: string
}

create type CustomerType as closed {
  c_custkey: int32, 
  c_name: string, 
  c_address: string, 
  c_nationkey: int32, 
  c_phone: string, 
  c_acctbal: double, 
  c_mktsegment: string,
  c_comment: string
}

create nodegroup group1 if not exists on nc1, nc2;

create dataset Orders(OrderType)
  partitioned by key o_orderkey;
create dataset Customer(CustomerType) 
  partitioned by key c_custkey;

write output to nc1:"/tmp/q13_customer_distribution.adm";

for $gco in (
	for $co in
		(
			for $c in dataset('Customer')
			return 
			{
				"c_custkey": $c.c_custkey, 
				 "o_orderkey_count": count(
						for $o in dataset('Orders')
   							where  $c.c_custkey = $o.o_custkey and not(like($o.o_comment,'%special%requests%'))
						return $o.o_orderkey)
			}
		)
	group by $c_custkey := $co.c_custkey with $co
		return{
			"c_custkey": $c_custkey, "c_count": sum(for $i in $co return $i.o_orderkey_count)
		}
)

group by $c_count := $gco.c_count with $gco
let $custdist := count($gco)
order by $custdist desc, $c_count desc
return {"c_count": $c_count, "custdist": $custdist}

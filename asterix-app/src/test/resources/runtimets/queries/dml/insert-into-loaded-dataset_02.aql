drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type Schema as closed {
unique1:  int64,
unique2:  int64,
two:  int64,
four:  int64,
ten:  int64,
twenty:  int64,
onePercent: int64,
tenPercent:  int64,
twentyPercent:  int64,
fiftyPercent:  int64,
unique3:  int64,
evenOnePercent: int64,
oddOnePercent:  int64,
stringu1:  string,
stringu2:  string,
string4:  string
}

create dataset onektup(Schema) partitioned by key unique2;

create dataset tenktup1(Schema) partitioned by key unique2;

load dataset onektup 
using "edu.uci.ics.asterix.external.dataset.adapter.NCFileSystemAdapter"
(("path"="nc1://data/wisc/onektup.adm"),("format"="delimited-text"),("delimiter"="|")) pre-sorted;

load dataset tenktup1 
using "edu.uci.ics.asterix.external.dataset.adapter.NCFileSystemAdapter"
(("path"="nc1://data/wisc/tenktup.adm"),("format"="delimited-text"),("delimiter"="|")) pre-sorted;

create dataset tmp(Schema) partitioned by key unique2;

load dataset tmp 
using "edu.uci.ics.asterix.external.dataset.adapter.NCFileSystemAdapter"
(("path"="nc1://data/wisc/empty.adm"),("format"="adm")) pre-sorted;

insert into dataset tmp(
for $l in dataset('tenktup1')
where $l.unique2 > 0 and $l.unique2 < 99
return $l
);

write output to nc1:"rttest/dml_insert-into-loaded-dataset_02.adm";      
for $t in dataset('tmp')
order by $t.unique2
return $t
